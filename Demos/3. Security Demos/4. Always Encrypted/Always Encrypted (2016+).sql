/* =================== Always Encrypted (2016) =================== */

CREATE DATABASE MyEncryptedDB
GO

USE MyEncryptedDB
GO

-- Populate a table with sensitive data
CREATE TABLE Customer(
	CustomerId int IDENTITY(1,1) NOT NULL,
	Name varchar(20) NOT NULL,
	SSN varchar(20) NOT NULL,
	City varchar(20) NOT NULL
)

INSERT INTO Customer VALUES
 ('John Smith', '123-45-6789', 'New York'),
 ('Doug Nichols', '987-65-4321', 'Boston'),
 ('Joe Anonymous', 'n/a', 'Chicago')

-- View the sensitive data, unencrypted
SELECT * FROM Customer

-- Discover Always Encrypted keys (none yet)
SELECT * FROM sys.column_master_keys
SELECT * FROM sys.column_encryption_keys 
SELECT * FROM sys.column_encryption_key_values

-- Discover columns protected by Always Encrypted (none yet)
SELECT * FROM sys.columns WHERE column_encryption_key_id IS NOT NULL

/*
	Use Always Encrypted Wizard in SSMS to encrypt sensitive columns (Tasks, Encrypt Columns..., about 15 sec)
		- Name (randomized)
		- SSN (deterministic)

	The Table now looks like this:

	CREATE TABLE Customer(
		CustomerId int IDENTITY(1,1) NOT NULL,
		Name varchar(20)
			COLLATE Latin1_General_BIN2
			ENCRYPTED WITH (
				COLUMN_ENCRYPTION_KEY = CEK_Auto1,
				ENCRYPTION_TYPE = Randomized,
				ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256')
			NOT NULL,
		SSN varchar(20)
			COLLATE Latin1_General_BIN2
			ENCRYPTED WITH (
				COLUMN_ENCRYPTION_KEY = CEK_Auto1,
				ENCRYPTION_TYPE = Deterministic,
				ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256')
			NOT NULL,
		City varchar(20) NOT NULL
	)
*/

-- Data appears encrypted
SELECT * FROM Customer

-- Can't run queries on encrypted columns
SELECT * FROM Customer WHERE Name = 'John Smith'
SELECT * FROM Customer WHERE SSN = 'n/a'

-- Discover Always Encrypted keys
SELECT * FROM sys.column_master_keys
SELECT * FROM sys.column_encryption_keys 
SELECT * FROM sys.column_encryption_key_values

-- Discover columns protected by Always Encrypted
SELECT
	[column] = c.name,
	c.column_encryption_key_id,
	cek = cek.name,
	column_encryption_key_database_name = ISNULL(column_encryption_key_database_name, DB_NAME()),
	encryption_type_desc,
	encryption_algorithm_name
FROM
	sys.columns AS c
	INNER JOIN sys.column_encryption_keys AS cek ON c.column_encryption_key_id = cek.column_encryption_key_id
WHERE
	c.column_encryption_key_id IS NOT NULL

/* Change database connection to use "column encryption setting=enabled" option */

-- As of SSMS 17.0 - we can parameterize SQL statements in the query window for Always Encrypted
--  https://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/configure-always-encrypted-using-sql-server-management-studio?view=sql-server-2017
USE MyEncryptedDB
GO

-- Data appears decrypted
SELECT * FROM Customer

-- Still can't run queries on encrypted columns, or insert/update encrypted columns, with SSMS alone. These
-- actions must be parameterized, and issued by an ADO.NET client with "column encryption setting=enabled"
SELECT * FROM Customer WHERE Name = 'John Smith'
SELECT * FROM Customer WHERE SSN = 'n/a'

INSERT INTO Customer VALUES
 ('Steven Smith', '589-22-3690', 'Los Angeles')

-- Won't work with randomized
DECLARE @Name varchar(20) = 'John Smith'
SELECT * FROM Customer WHERE Name = @Name

-- Works with determinstic, if parameterization is enabled for AE in SSMS
DECLARE @Ssn varchar(20) = 'n/a'
SELECT * FROM Customer WHERE SSN = @Ssn

DECLARE @NewName varchar(20) = 'John Smith'
DECLARE @NewSsn varchar(20) = 'n/a'
INSERT INTO Customer VALUES
 (@NewName, @NewSsn, 'Los Angeles')

SELECT * FROM Customer
GO


-- Create stored procedures over AE-columns (automatic parameter-to-column mapping)

CREATE OR ALTER PROCEDURE SelectCustomers AS
BEGIN

	SELECT
		CustomerId,
		Name,
		Ssn,
		City
	FROM
		Customer
	--ORDER BY
	--	Name

END
GO

CREATE OR ALTER PROCEDURE SelectCustomersBySsn
	@SSN varchar(max)
AS
BEGIN

	SELECT
		CustomerId,
		Name,
		Ssn,
		City
	FROM
		Customer
	WHERE
		SSN = @SSN

END
GO

CREATE OR ALTER PROCEDURE InsertCustomer
	@Name varchar(20),	-- must match AE column data type in table or procedure won't compile
	@SSN varchar(20),	-- must match AE column data type in table or procedure won't compile
	@City varchar(max),
	@CustomerId int OUTPUT
AS
BEGIN

	--INSERT INTO Customer (Name, Ssn, City)
	-- VALUES (@Name, @Ssn, @City)

	INSERT INTO Customer
	 VALUES (@Name, @Ssn, @City)

	SELECT @CustomerId = SCOPE_IDENTITY()

END
GO

/* Run ADO.NET client */

-- Show encrypted data generated by client (in clear text)
SELECT * FROM Customer

/* Change database connection not to use "column encryption setting=enabled" option */

USE MyEncryptedDB
GO

-- Show encrypted data generated by client unreadable
SELECT * FROM Customer


-- Client driver parameter detection

-- Can't query on randomized
EXEC sp_describe_parameter_encryption N'SELECT COUNT(*) FROM Customer WHERE Name = @Name',N'@Name varchar(20)'

-- Describe encrypted SELECT parameter
EXEC sp_describe_parameter_encryption N'SELECT COUNT(*) FROM Customer WHERE SSN = @SSN',N'@SSN varchar(20)'

EXEC sp_executesql N'SELECT COUNT(*) FROM Customer WHERE SSN = @SSN',N'@SSN varchar(20)',
 @SSN=0x01C6AACCAD7B5D30584626E97FE3CEB00B4C8DC4F5BE1ED9A951CAF73B6083EB9B69E30FB816C96B252794AB4EBC2CCD9193855A1D838331596EC868127A6DBAE8

-- Can't run range query
EXEC sp_describe_parameter_encryption N'SELECT COUNT(*) FROM Customer WHERE SSN >= @SSN',N'@SSN varchar(20)'

-- Describe encrypted INSERT parameters
EXEC sp_describe_parameter_encryption
 N'INSERT INTO Customer VALUES(@Name, @SSN, @City)',
 N'@Name varchar(20),@SSN varchar(20),@City varchar(20)'

EXEC sp_executesql
 N'INSERT INTO Customer VALUES(@Name, @SSN, @City)',
 N'@Name varchar(20),@SSN varchar(20),@City varchar(20)',
 @Name=0x01402770B9B82F5575A5A1E3154DBE4C590B21EFEA8F15BD959F8480BD5FAA74DFB645420CA5401ADBDFC2BC77CD8038A4B67014EEBDF77046447A9B4A785CF0B7,
 @SSN=0x0197EE262DFF8D30BD6572CEC3C6D876CBEED25F180E045204FDE51C15E121981C70FE07378D6AA9F0CAA8335AAC182EFC918C608B551D6AE24F70666799390F36,
 @City='Los Angeles'

-- Describe encrypted stored procedure parameter mapped to SELECT statement
EXEC sp_describe_parameter_encryption
 N'EXEC [SelectCustomersBySsn] @SSN=@SSN',N'@SSN varchar(20)'

EXEC SelectCustomersBySsn
 @SSN=0x01C6AACCAD7B5D30584626E97FE3CEB00B4C8DC4F5BE1ED9A951CAF73B6083EB9B69E30FB816C96B252794AB4EBC2CCD9193855A1D838331596EC868127A6DBAE8

-- Describe encrypted stored procedure parameter mapped to INSERT statement
EXEC sp_describe_parameter_encryption
 N'EXEC [InsertCustomer] @Name=@Name, @SSN=@SSN, @City=@City, @CustomerId=@CustomerId OUTPUT',
 N'@Name varchar(20),@SSN varchar(20),@City varchar(7),@CustomerId int output'

DECLARE @p4 int
SET @p4=6
EXEC InsertCustomer
 @Name=0x01ADD4113ABFADA72658184DE38EDB1D67018F0486C96E40A6E7BE1844D7F6094227AF0FE3FDC0FB91CD8E877A6643B0B3F492D32DB8E1D3B1F1755087906A4BB2,
 @SSN=0x01C2F0222C41C4DD4103DEA1C6A4C0B63DB3111272B684C48C2EC930A1FCC846B6570B24F4B8A22A9FAFC50D881AB4002AB6647F27B71421E816DA612B2FAFCEEF,
 @City='Atlanta',
 @CustomerId=@p4 OUTPUT
SELECT @p4

-- Cleanup
USE master
GO
ALTER DATABASE [MyEncryptedDB] SET  SINGLE_USER WITH ROLLBACK IMMEDIATE
GO
DROP DATABASE MyEncryptedDB


--  delete certificate
